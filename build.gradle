plugins {
    id "java"
    id "checkstyle"
    id "jacoco"
    alias(libs.plugins.spring.boot)
    alias(libs.plugins.spring.dependency.management)
    alias(libs.plugins.javaagent.test)
}

group = 'com.coherentsolutions.pot'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}
configurations.configureEach {
    resolutionStrategy {
        force 'org.apache.commons:commons-compress:1.27.1'
    }
}

jacoco {
    toolVersion = "0.8.13"
}

checkstyle {
    toolVersion = '10.26.1'
    configFile = file("config/checkstyle/google_checks.xml")
    ignoreFailures = false
    showViolations = true
    maxErrors = 0
    maxWarnings = 0
}

dependencies {
    implementation libs.spring.boot.starter.data.jpa
    implementation libs.spring.boot.starter.validation
    implementation libs.spring.boot.starter.web
    implementation libs.spring.boot.starter.actuator
    implementation libs.spring.boot.starter.security
    implementation libs.postgresql
    implementation libs.liquibase.core
    implementation libs.mapstruct
    implementation libs.springdoc.openapi
    implementation libs.auth0
    implementation libs.dotenv
    implementation libs.spring.boot.starter.oauth2.resource.server
    compileOnly libs.lombok
    annotationProcessor libs.lombok
    annotationProcessor libs.mapstruct.processor
    testImplementation libs.spring.boot.starter.test
    testImplementation libs.testcontainers.postgresql
    testImplementation libs.testcontainers.junit.jupiter
    testImplementation libs.spring.security.test

    testRuntimeOnly libs.junit.platform.launcher
    testJavaagent libs.byte.buddy.agent
}

tasks.named('test') {
    enabled = false
}

tasks.register('unitTest', Test) {
    description = 'Runs only unit tests.'
    group = 'verification'

    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath

    useJUnitPlatform()
    finalizedBy jacocoTestReport
    include '**/unit/**/*.class'

}

tasks.register('integrationTest', Test) {
    description = 'Runs only integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath

    useJUnitPlatform()
    finalizedBy jacocoTestReport
    include '**/integration/**/*.class'

    shouldRunAfter tasks.named('unitTest')
}

jacocoTestReport {
    dependsOn tasks.named("unitTest"), tasks.named("integrationTest")

    reports {
        xml.required = true
        html.required = true
    }

    executionData.setFrom(fileTree(rootProject.layout.buildDirectory).include("/jacoco/*.exec"))
}

jacocoTestCoverageVerification {
    mustRunAfter tasks.named('unitTest'), tasks.named('integrationTest')

    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }

    executionData.setFrom(fileTree(rootProject.layout.buildDirectory).include("/jacoco/*.exec"))
}

check {
    dependsOn tasks.named('unitTest')
    dependsOn tasks.named('integrationTest')
    dependsOn tasks.named('jacocoTestCoverageVerification')
}
