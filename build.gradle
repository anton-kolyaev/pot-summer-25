plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.ryandens.javaagent-test' version '0.8.0'
}

group = 'com.coherentsolutions.pot'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}
configurations.configureEach {
    resolutionStrategy {
        force 'org.apache.commons:commons-compress:1.27.1'
    }
}

jacoco {
    toolVersion = "0.8.13"
}

checkstyle {
    toolVersion = '10.26.1'
    configFile = file("config/checkstyle/google_checks.xml")
    ignoreFailures = false
    showViolations = true
    maxErrors = 0
    maxWarnings = 0
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.postgresql:postgresql'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.mapstruct:mapstruct:1.6.3'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
    implementation 'com.auth0:auth0:2.22.0'
    implementation 'me.paulschwarz:spring-dotenv:4.0.0'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:postgresql:1.21.3'
    testImplementation 'org.testcontainers:junit-jupiter:1.21.3'
    testImplementation "org.springframework.security:spring-security-test"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testJavaagent 'net.bytebuddy:byte-buddy-agent:1.17.6'
}

tasks.named('test') {
    enabled = false
}

tasks.register('unitTest', Test) {
    description = 'Runs only unit tests.'
    group = 'verification'

    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath

    useJUnitPlatform()
    include '**/unit/**/*.class'

}

tasks.register('integrationTest', Test) {
    description = 'Runs only integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath

    useJUnitPlatform()
    include '**/integration/**/*.class'

    shouldRunAfter tasks.named('unitTest')
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }

    executionData.setFrom(fileTree(rootProject.layout.buildDirectory).include("/jacoco/*.exec"))
}

jacocoTestCoverageVerification {
    mustRunAfter tasks.named('unitTest'), tasks.named('integrationTest')

    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }

    executionData.setFrom(fileTree(rootProject.layout.buildDirectory).include("/jacoco/*.exec"))
}

check {
    dependsOn tasks.named('unitTest')
    dependsOn tasks.named('integrationTest')
    dependsOn tasks.named('jacocoTestCoverageVerification')
}
